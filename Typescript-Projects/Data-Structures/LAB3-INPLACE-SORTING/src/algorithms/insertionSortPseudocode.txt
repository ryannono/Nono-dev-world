Algorithm insertionSort (array)
  input: array to sort
  output: sorted array

  if (array.length < 2)
    return array

  for (
    positionIndex <- 1, length <- array.length;
    positionIndex < length;
    positionIndex++
  )
    currElement <- array[positionIndex]
    prevElement <- array[positionIndex - 1]
    swapCount <- 0

    if (currElement < prevElement)
      for (
        sortedIndex <- positionIndex - 1;
        sortedIndex >= 0;
        sortedIndex--
      )
        currElementIndex <- positionIndex - swapCount
        sortedElement <- array[sortedIndex]

        if (currElement > sortedElement) break
        swap array[sortedIndex] and array[currElementIndex]
        swapCount++
  
  return array